Sofie aims to enhance the KATTIS experience (tm) and act as a personal assistant.

sofie config <param> <value>
no parameters: display all settings (which are stored in ~/.kattissrc)
if ~/.kattissrc does not exist ==> prompt user to login and give link to file
given some parameters, update ~/.kattissrc
config is stored in some easy-to-parse format (backwards compatible)

includes:
kattis url (by default kattis.scrool.se)
username and token
default parameters for init and submit


sofie init <problem/session>
creates a .sofie directory with configuration settings.
test directory with any available tests, both downloadable and parseable.
optionally: create all of the above in a subdirectory named <problem> (-p)
optionally: download description to 'desc' with -d switch.
all of the above are repeated for all problems if a session is given.

sofie submit <problem>
requires a .sofie directory being present, or submits to the specified problem id
identifies the language in use and which files will be sent to kattis
automatically selects all files and submits them to kattis, saving submission id
outputs new status until the submission is failed/accepeted
finally saves a short history log within the .sofie directory, available offline
includes: <session>, problem id, submission id, status, time occupied
supports parameters: --verbose --quiet --submit


sofie stats --all
Will print stats of the current, optionally all underlying, directories.
Maintains some state about problem being solved and the time required.

sofie party
dance, dance, dance
\ \ ... / /
    *    *
  *   *

-----------------------------

Production cycle

Begin by experimenting with POST submissions and authenticating to kattis using token.
Build basic structure with connectors to all relevant pages.
Write parsers for relevant information.
Implement all sub-commands.
Implement language identification.
Integrate configuration file.
Write documentation and help.

rev1: sofie init <problem> [-p]
      [mkdir workingdir]
      [cd workingdir]
      mkdir tests; mkdir .sofie 
      write .sofie/config with problem id
      [retrieve all tests]

      sofie submit
      read .sofie/config, find problem id
      read all source files in the current dir, recursively
      determine language, only support for C++
      make submission, retrieve submission id
      poll submission id until complete, print status in each step
      finally register submission id and result in .sofie/results

      sofie stats
      verify that .sofie exists with necessary files
      print problem id
      print all results stored in the current dir as {id} {date/time} {status}
      print if ever accepted

use ConfigFile for parse/storage of configuration state

main: parser of command line, activates some submodule
Utils: authentication and generic page retrieval functions
LanguageIdentification: identifies language of submission, given list of file paths
